module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBid {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateRegion {
  count: Int!
}

type AggregateService {
  count: Int!
}

type AggregateSpecialty {
  count: Int!
}

type AggregateStudy {
  count: Int!
}

type AggregateTherapeuticArea {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Bid {
  id: ID!
  company: Company!
  bid_amount: Float!
  is_approved: Boolean!
  study: Study!
}

type BidConnection {
  pageInfo: PageInfo!
  edges: [BidEdge]!
  aggregate: AggregateBid!
}

input BidCreateInput {
  id: ID
  company: CompanyCreateOneWithoutBidsInput!
  bid_amount: Float!
  is_approved: Boolean
  study: StudyCreateOneInput!
}

input BidCreateManyWithoutCompanyInput {
  create: [BidCreateWithoutCompanyInput!]
  connect: [BidWhereUniqueInput!]
}

input BidCreateWithoutCompanyInput {
  id: ID
  bid_amount: Float!
  is_approved: Boolean
  study: StudyCreateOneInput!
}

type BidEdge {
  node: Bid!
  cursor: String!
}

enum BidOrderByInput {
  id_ASC
  id_DESC
  bid_amount_ASC
  bid_amount_DESC
  is_approved_ASC
  is_approved_DESC
}

type BidPreviousValues {
  id: ID!
  bid_amount: Float!
  is_approved: Boolean!
}

input BidScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  bid_amount: Float
  bid_amount_not: Float
  bid_amount_in: [Float!]
  bid_amount_not_in: [Float!]
  bid_amount_lt: Float
  bid_amount_lte: Float
  bid_amount_gt: Float
  bid_amount_gte: Float
  is_approved: Boolean
  is_approved_not: Boolean
  AND: [BidScalarWhereInput!]
  OR: [BidScalarWhereInput!]
  NOT: [BidScalarWhereInput!]
}

type BidSubscriptionPayload {
  mutation: MutationType!
  node: Bid
  updatedFields: [String!]
  previousValues: BidPreviousValues
}

input BidSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BidWhereInput
  AND: [BidSubscriptionWhereInput!]
  OR: [BidSubscriptionWhereInput!]
  NOT: [BidSubscriptionWhereInput!]
}

input BidUpdateInput {
  company: CompanyUpdateOneRequiredWithoutBidsInput
  bid_amount: Float
  is_approved: Boolean
  study: StudyUpdateOneRequiredInput
}

input BidUpdateManyDataInput {
  bid_amount: Float
  is_approved: Boolean
}

input BidUpdateManyMutationInput {
  bid_amount: Float
  is_approved: Boolean
}

input BidUpdateManyWithoutCompanyInput {
  create: [BidCreateWithoutCompanyInput!]
  delete: [BidWhereUniqueInput!]
  connect: [BidWhereUniqueInput!]
  set: [BidWhereUniqueInput!]
  disconnect: [BidWhereUniqueInput!]
  update: [BidUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [BidUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [BidScalarWhereInput!]
  updateMany: [BidUpdateManyWithWhereNestedInput!]
}

input BidUpdateManyWithWhereNestedInput {
  where: BidScalarWhereInput!
  data: BidUpdateManyDataInput!
}

input BidUpdateWithoutCompanyDataInput {
  bid_amount: Float
  is_approved: Boolean
  study: StudyUpdateOneRequiredInput
}

input BidUpdateWithWhereUniqueWithoutCompanyInput {
  where: BidWhereUniqueInput!
  data: BidUpdateWithoutCompanyDataInput!
}

input BidUpsertWithWhereUniqueWithoutCompanyInput {
  where: BidWhereUniqueInput!
  update: BidUpdateWithoutCompanyDataInput!
  create: BidCreateWithoutCompanyInput!
}

input BidWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  company: CompanyWhereInput
  bid_amount: Float
  bid_amount_not: Float
  bid_amount_in: [Float!]
  bid_amount_not_in: [Float!]
  bid_amount_lt: Float
  bid_amount_lte: Float
  bid_amount_gt: Float
  bid_amount_gte: Float
  is_approved: Boolean
  is_approved_not: Boolean
  study: StudyWhereInput
  AND: [BidWhereInput!]
  OR: [BidWhereInput!]
  NOT: [BidWhereInput!]
}

input BidWhereUniqueInput {
  id: ID
}

type Company {
  id: ID!
  name: String!
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service!]
  specialties(where: SpecialtyWhereInput, orderBy: SpecialtyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Specialty!]
  regionsCovered(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Region!]
  therapeuticAreas(where: TherapeuticAreaWhereInput, orderBy: TherapeuticAreaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TherapeuticArea!]
  studies(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Study!]
  bids(where: BidWhereInput, orderBy: BidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bid!]
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  name: String!
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompaniesInput
  specialties: SpecialtyCreateManyWithoutCompaniesInput
  regionsCovered: RegionCreateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
  bids: BidCreateManyWithoutCompanyInput
}

input CompanyCreateManyWithoutRegionsCoveredInput {
  create: [CompanyCreateWithoutRegionsCoveredInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateManyWithoutServicesInput {
  create: [CompanyCreateWithoutServicesInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateManyWithoutSpecialtiesInput {
  create: [CompanyCreateWithoutSpecialtiesInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateManyWithoutTherapeuticAreasInput {
  create: [CompanyCreateWithoutTherapeuticAreasInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateOneWithoutBidsInput {
  create: CompanyCreateWithoutBidsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutStudiesInput {
  create: CompanyCreateWithoutStudiesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutBidsInput {
  id: ID
  name: String!
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompaniesInput
  specialties: SpecialtyCreateManyWithoutCompaniesInput
  regionsCovered: RegionCreateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutRegionsCoveredInput {
  id: ID
  name: String!
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompaniesInput
  specialties: SpecialtyCreateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
  bids: BidCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutServicesInput {
  id: ID
  name: String!
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  specialties: SpecialtyCreateManyWithoutCompaniesInput
  regionsCovered: RegionCreateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
  bids: BidCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutSpecialtiesInput {
  id: ID
  name: String!
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompaniesInput
  regionsCovered: RegionCreateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
  bids: BidCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutStudiesInput {
  id: ID
  name: String!
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompaniesInput
  specialties: SpecialtyCreateManyWithoutCompaniesInput
  regionsCovered: RegionCreateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaCreateManyWithoutCompaniesInput
  bids: BidCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutTherapeuticAreasInput {
  id: ID
  name: String!
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceCreateManyWithoutCompaniesInput
  specialties: SpecialtyCreateManyWithoutCompaniesInput
  regionsCovered: RegionCreateManyWithoutCompaniesInput
  studies: StudyCreateManyWithoutCompanyInput
  bids: BidCreateManyWithoutCompanyInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  logoURL_ASC
  logoURL_DESC
  website_ASC
  website_DESC
  linkedin_ASC
  linkedin_DESC
  overview_ASC
  overview_DESC
  headquarters_ASC
  headquarters_DESC
  companySize_ASC
  companySize_DESC
}

type CompanyPreviousValues {
  id: ID!
  name: String!
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
}

input CompanyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  logoURL: String
  logoURL_not: String
  logoURL_in: [String!]
  logoURL_not_in: [String!]
  logoURL_lt: String
  logoURL_lte: String
  logoURL_gt: String
  logoURL_gte: String
  logoURL_contains: String
  logoURL_not_contains: String
  logoURL_starts_with: String
  logoURL_not_starts_with: String
  logoURL_ends_with: String
  logoURL_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  linkedin: String
  linkedin_not: String
  linkedin_in: [String!]
  linkedin_not_in: [String!]
  linkedin_lt: String
  linkedin_lte: String
  linkedin_gt: String
  linkedin_gte: String
  linkedin_contains: String
  linkedin_not_contains: String
  linkedin_starts_with: String
  linkedin_not_starts_with: String
  linkedin_ends_with: String
  linkedin_not_ends_with: String
  overview: String
  overview_not: String
  overview_in: [String!]
  overview_not_in: [String!]
  overview_lt: String
  overview_lte: String
  overview_gt: String
  overview_gte: String
  overview_contains: String
  overview_not_contains: String
  overview_starts_with: String
  overview_not_starts_with: String
  overview_ends_with: String
  overview_not_ends_with: String
  headquarters: String
  headquarters_not: String
  headquarters_in: [String!]
  headquarters_not_in: [String!]
  headquarters_lt: String
  headquarters_lte: String
  headquarters_gt: String
  headquarters_gte: String
  headquarters_contains: String
  headquarters_not_contains: String
  headquarters_starts_with: String
  headquarters_not_starts_with: String
  headquarters_ends_with: String
  headquarters_not_ends_with: String
  companySize: CompanySize
  companySize_not: CompanySize
  companySize_in: [CompanySize!]
  companySize_not_in: [CompanySize!]
  AND: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
}

enum CompanySize {
  A
  B
  C
  D
  E
  F
  G
  H
  I
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateInput {
  name: String
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompaniesInput
  specialties: SpecialtyUpdateManyWithoutCompaniesInput
  regionsCovered: RegionUpdateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
  bids: BidUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyDataInput {
  name: String
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
}

input CompanyUpdateManyMutationInput {
  name: String
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
}

input CompanyUpdateManyWithoutRegionsCoveredInput {
  create: [CompanyCreateWithoutRegionsCoveredInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutRegionsCoveredInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutRegionsCoveredInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithoutServicesInput {
  create: [CompanyCreateWithoutServicesInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutServicesInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutServicesInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithoutSpecialtiesInput {
  create: [CompanyCreateWithoutSpecialtiesInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutSpecialtiesInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutSpecialtiesInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithoutTherapeuticAreasInput {
  create: [CompanyCreateWithoutTherapeuticAreasInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutTherapeuticAreasInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutTherapeuticAreasInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyDataInput!
}

input CompanyUpdateOneRequiredWithoutBidsInput {
  create: CompanyCreateWithoutBidsInput
  update: CompanyUpdateWithoutBidsDataInput
  upsert: CompanyUpsertWithoutBidsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutStudiesInput {
  create: CompanyCreateWithoutStudiesInput
  update: CompanyUpdateWithoutStudiesDataInput
  upsert: CompanyUpsertWithoutStudiesInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutBidsDataInput {
  name: String
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompaniesInput
  specialties: SpecialtyUpdateManyWithoutCompaniesInput
  regionsCovered: RegionUpdateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutRegionsCoveredDataInput {
  name: String
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompaniesInput
  specialties: SpecialtyUpdateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
  bids: BidUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutServicesDataInput {
  name: String
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  specialties: SpecialtyUpdateManyWithoutCompaniesInput
  regionsCovered: RegionUpdateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
  bids: BidUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutSpecialtiesDataInput {
  name: String
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompaniesInput
  regionsCovered: RegionUpdateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
  bids: BidUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutStudiesDataInput {
  name: String
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompaniesInput
  specialties: SpecialtyUpdateManyWithoutCompaniesInput
  regionsCovered: RegionUpdateManyWithoutCompaniesInput
  therapeuticAreas: TherapeuticAreaUpdateManyWithoutCompaniesInput
  bids: BidUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutTherapeuticAreasDataInput {
  name: String
  logoURL: String
  website: String
  linkedin: String
  overview: String
  headquarters: String
  companySize: CompanySize
  services: ServiceUpdateManyWithoutCompaniesInput
  specialties: SpecialtyUpdateManyWithoutCompaniesInput
  regionsCovered: RegionUpdateManyWithoutCompaniesInput
  studies: StudyUpdateManyWithoutCompanyInput
  bids: BidUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithWhereUniqueWithoutRegionsCoveredInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutRegionsCoveredDataInput!
}

input CompanyUpdateWithWhereUniqueWithoutServicesInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutServicesDataInput!
}

input CompanyUpdateWithWhereUniqueWithoutSpecialtiesInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutSpecialtiesDataInput!
}

input CompanyUpdateWithWhereUniqueWithoutTherapeuticAreasInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutTherapeuticAreasDataInput!
}

input CompanyUpsertWithoutBidsInput {
  update: CompanyUpdateWithoutBidsDataInput!
  create: CompanyCreateWithoutBidsInput!
}

input CompanyUpsertWithoutStudiesInput {
  update: CompanyUpdateWithoutStudiesDataInput!
  create: CompanyCreateWithoutStudiesInput!
}

input CompanyUpsertWithWhereUniqueWithoutRegionsCoveredInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutRegionsCoveredDataInput!
  create: CompanyCreateWithoutRegionsCoveredInput!
}

input CompanyUpsertWithWhereUniqueWithoutServicesInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutServicesDataInput!
  create: CompanyCreateWithoutServicesInput!
}

input CompanyUpsertWithWhereUniqueWithoutSpecialtiesInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutSpecialtiesDataInput!
  create: CompanyCreateWithoutSpecialtiesInput!
}

input CompanyUpsertWithWhereUniqueWithoutTherapeuticAreasInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutTherapeuticAreasDataInput!
  create: CompanyCreateWithoutTherapeuticAreasInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  logoURL: String
  logoURL_not: String
  logoURL_in: [String!]
  logoURL_not_in: [String!]
  logoURL_lt: String
  logoURL_lte: String
  logoURL_gt: String
  logoURL_gte: String
  logoURL_contains: String
  logoURL_not_contains: String
  logoURL_starts_with: String
  logoURL_not_starts_with: String
  logoURL_ends_with: String
  logoURL_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  linkedin: String
  linkedin_not: String
  linkedin_in: [String!]
  linkedin_not_in: [String!]
  linkedin_lt: String
  linkedin_lte: String
  linkedin_gt: String
  linkedin_gte: String
  linkedin_contains: String
  linkedin_not_contains: String
  linkedin_starts_with: String
  linkedin_not_starts_with: String
  linkedin_ends_with: String
  linkedin_not_ends_with: String
  overview: String
  overview_not: String
  overview_in: [String!]
  overview_not_in: [String!]
  overview_lt: String
  overview_lte: String
  overview_gt: String
  overview_gte: String
  overview_contains: String
  overview_not_contains: String
  overview_starts_with: String
  overview_not_starts_with: String
  overview_ends_with: String
  overview_not_ends_with: String
  headquarters: String
  headquarters_not: String
  headquarters_in: [String!]
  headquarters_not_in: [String!]
  headquarters_lt: String
  headquarters_lte: String
  headquarters_gt: String
  headquarters_gte: String
  headquarters_contains: String
  headquarters_not_contains: String
  headquarters_starts_with: String
  headquarters_not_starts_with: String
  headquarters_ends_with: String
  headquarters_not_ends_with: String
  companySize: CompanySize
  companySize_not: CompanySize
  companySize_in: [CompanySize!]
  companySize_not_in: [CompanySize!]
  services_every: ServiceWhereInput
  services_some: ServiceWhereInput
  services_none: ServiceWhereInput
  specialties_every: SpecialtyWhereInput
  specialties_some: SpecialtyWhereInput
  specialties_none: SpecialtyWhereInput
  regionsCovered_every: RegionWhereInput
  regionsCovered_some: RegionWhereInput
  regionsCovered_none: RegionWhereInput
  therapeuticAreas_every: TherapeuticAreaWhereInput
  therapeuticAreas_some: TherapeuticAreaWhereInput
  therapeuticAreas_none: TherapeuticAreaWhereInput
  studies_every: StudyWhereInput
  studies_some: StudyWhereInput
  studies_none: StudyWhereInput
  bids_every: BidWhereInput
  bids_some: BidWhereInput
  bids_none: BidWhereInput
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

scalar Long

type Mutation {
  createBid(data: BidCreateInput!): Bid!
  updateBid(data: BidUpdateInput!, where: BidWhereUniqueInput!): Bid
  updateManyBids(data: BidUpdateManyMutationInput!, where: BidWhereInput): BatchPayload!
  upsertBid(where: BidWhereUniqueInput!, create: BidCreateInput!, update: BidUpdateInput!): Bid!
  deleteBid(where: BidWhereUniqueInput!): Bid
  deleteManyBids(where: BidWhereInput): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createRegion(data: RegionCreateInput!): Region!
  updateRegion(data: RegionUpdateInput!, where: RegionWhereUniqueInput!): Region
  updateManyRegions(data: RegionUpdateManyMutationInput!, where: RegionWhereInput): BatchPayload!
  upsertRegion(where: RegionWhereUniqueInput!, create: RegionCreateInput!, update: RegionUpdateInput!): Region!
  deleteRegion(where: RegionWhereUniqueInput!): Region
  deleteManyRegions(where: RegionWhereInput): BatchPayload!
  createService(data: ServiceCreateInput!): Service!
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  updateManyServices(data: ServiceUpdateManyMutationInput!, where: ServiceWhereInput): BatchPayload!
  upsertService(where: ServiceWhereUniqueInput!, create: ServiceCreateInput!, update: ServiceUpdateInput!): Service!
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteManyServices(where: ServiceWhereInput): BatchPayload!
  createSpecialty(data: SpecialtyCreateInput!): Specialty!
  updateSpecialty(data: SpecialtyUpdateInput!, where: SpecialtyWhereUniqueInput!): Specialty
  updateManySpecialties(data: SpecialtyUpdateManyMutationInput!, where: SpecialtyWhereInput): BatchPayload!
  upsertSpecialty(where: SpecialtyWhereUniqueInput!, create: SpecialtyCreateInput!, update: SpecialtyUpdateInput!): Specialty!
  deleteSpecialty(where: SpecialtyWhereUniqueInput!): Specialty
  deleteManySpecialties(where: SpecialtyWhereInput): BatchPayload!
  createStudy(data: StudyCreateInput!): Study!
  updateStudy(data: StudyUpdateInput!, where: StudyWhereUniqueInput!): Study
  updateManyStudies(data: StudyUpdateManyMutationInput!, where: StudyWhereInput): BatchPayload!
  upsertStudy(where: StudyWhereUniqueInput!, create: StudyCreateInput!, update: StudyUpdateInput!): Study!
  deleteStudy(where: StudyWhereUniqueInput!): Study
  deleteManyStudies(where: StudyWhereInput): BatchPayload!
  createTherapeuticArea(data: TherapeuticAreaCreateInput!): TherapeuticArea!
  updateTherapeuticArea(data: TherapeuticAreaUpdateInput!, where: TherapeuticAreaWhereUniqueInput!): TherapeuticArea
  updateManyTherapeuticAreas(data: TherapeuticAreaUpdateManyMutationInput!, where: TherapeuticAreaWhereInput): BatchPayload!
  upsertTherapeuticArea(where: TherapeuticAreaWhereUniqueInput!, create: TherapeuticAreaCreateInput!, update: TherapeuticAreaUpdateInput!): TherapeuticArea!
  deleteTherapeuticArea(where: TherapeuticAreaWhereUniqueInput!): TherapeuticArea
  deleteManyTherapeuticAreas(where: TherapeuticAreaWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  bid(where: BidWhereUniqueInput!): Bid
  bids(where: BidWhereInput, orderBy: BidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bid]!
  bidsConnection(where: BidWhereInput, orderBy: BidOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BidConnection!
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  region(where: RegionWhereUniqueInput!): Region
  regions(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Region]!
  regionsConnection(where: RegionWhereInput, orderBy: RegionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegionConnection!
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service]!
  servicesConnection(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceConnection!
  specialty(where: SpecialtyWhereUniqueInput!): Specialty
  specialties(where: SpecialtyWhereInput, orderBy: SpecialtyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Specialty]!
  specialtiesConnection(where: SpecialtyWhereInput, orderBy: SpecialtyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpecialtyConnection!
  study(where: StudyWhereUniqueInput!): Study
  studies(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Study]!
  studiesConnection(where: StudyWhereInput, orderBy: StudyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudyConnection!
  therapeuticArea(where: TherapeuticAreaWhereUniqueInput!): TherapeuticArea
  therapeuticAreas(where: TherapeuticAreaWhereInput, orderBy: TherapeuticAreaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TherapeuticArea]!
  therapeuticAreasConnection(where: TherapeuticAreaWhereInput, orderBy: TherapeuticAreaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TherapeuticAreaConnection!
  node(id: ID!): Node
}

type Region {
  id: ID!
  name: String!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
}

type RegionConnection {
  pageInfo: PageInfo!
  edges: [RegionEdge]!
  aggregate: AggregateRegion!
}

input RegionCreateInput {
  id: ID
  name: String!
  companies: CompanyCreateManyWithoutRegionsCoveredInput
}

input RegionCreateManyWithoutCompaniesInput {
  create: [RegionCreateWithoutCompaniesInput!]
  connect: [RegionWhereUniqueInput!]
}

input RegionCreateWithoutCompaniesInput {
  id: ID
  name: String!
}

type RegionEdge {
  node: Region!
  cursor: String!
}

enum RegionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type RegionPreviousValues {
  id: ID!
  name: String!
}

input RegionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [RegionScalarWhereInput!]
  OR: [RegionScalarWhereInput!]
  NOT: [RegionScalarWhereInput!]
}

type RegionSubscriptionPayload {
  mutation: MutationType!
  node: Region
  updatedFields: [String!]
  previousValues: RegionPreviousValues
}

input RegionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RegionWhereInput
  AND: [RegionSubscriptionWhereInput!]
  OR: [RegionSubscriptionWhereInput!]
  NOT: [RegionSubscriptionWhereInput!]
}

input RegionUpdateInput {
  name: String
  companies: CompanyUpdateManyWithoutRegionsCoveredInput
}

input RegionUpdateManyDataInput {
  name: String
}

input RegionUpdateManyMutationInput {
  name: String
}

input RegionUpdateManyWithoutCompaniesInput {
  create: [RegionCreateWithoutCompaniesInput!]
  delete: [RegionWhereUniqueInput!]
  connect: [RegionWhereUniqueInput!]
  set: [RegionWhereUniqueInput!]
  disconnect: [RegionWhereUniqueInput!]
  update: [RegionUpdateWithWhereUniqueWithoutCompaniesInput!]
  upsert: [RegionUpsertWithWhereUniqueWithoutCompaniesInput!]
  deleteMany: [RegionScalarWhereInput!]
  updateMany: [RegionUpdateManyWithWhereNestedInput!]
}

input RegionUpdateManyWithWhereNestedInput {
  where: RegionScalarWhereInput!
  data: RegionUpdateManyDataInput!
}

input RegionUpdateWithoutCompaniesDataInput {
  name: String
}

input RegionUpdateWithWhereUniqueWithoutCompaniesInput {
  where: RegionWhereUniqueInput!
  data: RegionUpdateWithoutCompaniesDataInput!
}

input RegionUpsertWithWhereUniqueWithoutCompaniesInput {
  where: RegionWhereUniqueInput!
  update: RegionUpdateWithoutCompaniesDataInput!
  create: RegionCreateWithoutCompaniesInput!
}

input RegionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
  AND: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  NOT: [RegionWhereInput!]
}

input RegionWhereUniqueInput {
  id: ID
  name: String
}

type Service {
  id: ID!
  name: String!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
}

type ServiceConnection {
  pageInfo: PageInfo!
  edges: [ServiceEdge]!
  aggregate: AggregateService!
}

input ServiceCreateInput {
  id: ID
  name: String!
  companies: CompanyCreateManyWithoutServicesInput
}

input ServiceCreateManyWithoutCompaniesInput {
  create: [ServiceCreateWithoutCompaniesInput!]
  connect: [ServiceWhereUniqueInput!]
}

input ServiceCreateWithoutCompaniesInput {
  id: ID
  name: String!
}

type ServiceEdge {
  node: Service!
  cursor: String!
}

enum ServiceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ServicePreviousValues {
  id: ID!
  name: String!
}

input ServiceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ServiceScalarWhereInput!]
  OR: [ServiceScalarWhereInput!]
  NOT: [ServiceScalarWhereInput!]
}

type ServiceSubscriptionPayload {
  mutation: MutationType!
  node: Service
  updatedFields: [String!]
  previousValues: ServicePreviousValues
}

input ServiceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceWhereInput
  AND: [ServiceSubscriptionWhereInput!]
  OR: [ServiceSubscriptionWhereInput!]
  NOT: [ServiceSubscriptionWhereInput!]
}

input ServiceUpdateInput {
  name: String
  companies: CompanyUpdateManyWithoutServicesInput
}

input ServiceUpdateManyDataInput {
  name: String
}

input ServiceUpdateManyMutationInput {
  name: String
}

input ServiceUpdateManyWithoutCompaniesInput {
  create: [ServiceCreateWithoutCompaniesInput!]
  delete: [ServiceWhereUniqueInput!]
  connect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  disconnect: [ServiceWhereUniqueInput!]
  update: [ServiceUpdateWithWhereUniqueWithoutCompaniesInput!]
  upsert: [ServiceUpsertWithWhereUniqueWithoutCompaniesInput!]
  deleteMany: [ServiceScalarWhereInput!]
  updateMany: [ServiceUpdateManyWithWhereNestedInput!]
}

input ServiceUpdateManyWithWhereNestedInput {
  where: ServiceScalarWhereInput!
  data: ServiceUpdateManyDataInput!
}

input ServiceUpdateWithoutCompaniesDataInput {
  name: String
}

input ServiceUpdateWithWhereUniqueWithoutCompaniesInput {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateWithoutCompaniesDataInput!
}

input ServiceUpsertWithWhereUniqueWithoutCompaniesInput {
  where: ServiceWhereUniqueInput!
  update: ServiceUpdateWithoutCompaniesDataInput!
  create: ServiceCreateWithoutCompaniesInput!
}

input ServiceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
}

input ServiceWhereUniqueInput {
  id: ID
  name: String
}

type Specialty {
  id: ID!
  name: String!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
}

type SpecialtyConnection {
  pageInfo: PageInfo!
  edges: [SpecialtyEdge]!
  aggregate: AggregateSpecialty!
}

input SpecialtyCreateInput {
  id: ID
  name: String!
  companies: CompanyCreateManyWithoutSpecialtiesInput
}

input SpecialtyCreateManyWithoutCompaniesInput {
  create: [SpecialtyCreateWithoutCompaniesInput!]
  connect: [SpecialtyWhereUniqueInput!]
}

input SpecialtyCreateWithoutCompaniesInput {
  id: ID
  name: String!
}

type SpecialtyEdge {
  node: Specialty!
  cursor: String!
}

enum SpecialtyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type SpecialtyPreviousValues {
  id: ID!
  name: String!
}

input SpecialtyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [SpecialtyScalarWhereInput!]
  OR: [SpecialtyScalarWhereInput!]
  NOT: [SpecialtyScalarWhereInput!]
}

type SpecialtySubscriptionPayload {
  mutation: MutationType!
  node: Specialty
  updatedFields: [String!]
  previousValues: SpecialtyPreviousValues
}

input SpecialtySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SpecialtyWhereInput
  AND: [SpecialtySubscriptionWhereInput!]
  OR: [SpecialtySubscriptionWhereInput!]
  NOT: [SpecialtySubscriptionWhereInput!]
}

input SpecialtyUpdateInput {
  name: String
  companies: CompanyUpdateManyWithoutSpecialtiesInput
}

input SpecialtyUpdateManyDataInput {
  name: String
}

input SpecialtyUpdateManyMutationInput {
  name: String
}

input SpecialtyUpdateManyWithoutCompaniesInput {
  create: [SpecialtyCreateWithoutCompaniesInput!]
  delete: [SpecialtyWhereUniqueInput!]
  connect: [SpecialtyWhereUniqueInput!]
  set: [SpecialtyWhereUniqueInput!]
  disconnect: [SpecialtyWhereUniqueInput!]
  update: [SpecialtyUpdateWithWhereUniqueWithoutCompaniesInput!]
  upsert: [SpecialtyUpsertWithWhereUniqueWithoutCompaniesInput!]
  deleteMany: [SpecialtyScalarWhereInput!]
  updateMany: [SpecialtyUpdateManyWithWhereNestedInput!]
}

input SpecialtyUpdateManyWithWhereNestedInput {
  where: SpecialtyScalarWhereInput!
  data: SpecialtyUpdateManyDataInput!
}

input SpecialtyUpdateWithoutCompaniesDataInput {
  name: String
}

input SpecialtyUpdateWithWhereUniqueWithoutCompaniesInput {
  where: SpecialtyWhereUniqueInput!
  data: SpecialtyUpdateWithoutCompaniesDataInput!
}

input SpecialtyUpsertWithWhereUniqueWithoutCompaniesInput {
  where: SpecialtyWhereUniqueInput!
  update: SpecialtyUpdateWithoutCompaniesDataInput!
  create: SpecialtyCreateWithoutCompaniesInput!
}

input SpecialtyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
  AND: [SpecialtyWhereInput!]
  OR: [SpecialtyWhereInput!]
  NOT: [SpecialtyWhereInput!]
}

input SpecialtyWhereUniqueInput {
  id: ID
  name: String
}

type Study {
  id: ID!
  name: String!
  area: String!
  protocol_number: String!
  title: String!
  phase: Int!
  services: Int!
  modified_date: DateTime!
  status: String!
  company: Company!
}

type StudyConnection {
  pageInfo: PageInfo!
  edges: [StudyEdge]!
  aggregate: AggregateStudy!
}

input StudyCreateInput {
  id: ID
  name: String!
  area: String!
  protocol_number: String!
  title: String!
  phase: Int!
  services: Int!
  modified_date: DateTime!
  status: String!
  company: CompanyCreateOneWithoutStudiesInput!
}

input StudyCreateManyWithoutCompanyInput {
  create: [StudyCreateWithoutCompanyInput!]
  connect: [StudyWhereUniqueInput!]
}

input StudyCreateOneInput {
  create: StudyCreateInput
  connect: StudyWhereUniqueInput
}

input StudyCreateWithoutCompanyInput {
  id: ID
  name: String!
  area: String!
  protocol_number: String!
  title: String!
  phase: Int!
  services: Int!
  modified_date: DateTime!
  status: String!
}

type StudyEdge {
  node: Study!
  cursor: String!
}

enum StudyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  area_ASC
  area_DESC
  protocol_number_ASC
  protocol_number_DESC
  title_ASC
  title_DESC
  phase_ASC
  phase_DESC
  services_ASC
  services_DESC
  modified_date_ASC
  modified_date_DESC
  status_ASC
  status_DESC
}

type StudyPreviousValues {
  id: ID!
  name: String!
  area: String!
  protocol_number: String!
  title: String!
  phase: Int!
  services: Int!
  modified_date: DateTime!
  status: String!
}

input StudyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  area: String
  area_not: String
  area_in: [String!]
  area_not_in: [String!]
  area_lt: String
  area_lte: String
  area_gt: String
  area_gte: String
  area_contains: String
  area_not_contains: String
  area_starts_with: String
  area_not_starts_with: String
  area_ends_with: String
  area_not_ends_with: String
  protocol_number: String
  protocol_number_not: String
  protocol_number_in: [String!]
  protocol_number_not_in: [String!]
  protocol_number_lt: String
  protocol_number_lte: String
  protocol_number_gt: String
  protocol_number_gte: String
  protocol_number_contains: String
  protocol_number_not_contains: String
  protocol_number_starts_with: String
  protocol_number_not_starts_with: String
  protocol_number_ends_with: String
  protocol_number_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  phase: Int
  phase_not: Int
  phase_in: [Int!]
  phase_not_in: [Int!]
  phase_lt: Int
  phase_lte: Int
  phase_gt: Int
  phase_gte: Int
  services: Int
  services_not: Int
  services_in: [Int!]
  services_not_in: [Int!]
  services_lt: Int
  services_lte: Int
  services_gt: Int
  services_gte: Int
  modified_date: DateTime
  modified_date_not: DateTime
  modified_date_in: [DateTime!]
  modified_date_not_in: [DateTime!]
  modified_date_lt: DateTime
  modified_date_lte: DateTime
  modified_date_gt: DateTime
  modified_date_gte: DateTime
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  AND: [StudyScalarWhereInput!]
  OR: [StudyScalarWhereInput!]
  NOT: [StudyScalarWhereInput!]
}

type StudySubscriptionPayload {
  mutation: MutationType!
  node: Study
  updatedFields: [String!]
  previousValues: StudyPreviousValues
}

input StudySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StudyWhereInput
  AND: [StudySubscriptionWhereInput!]
  OR: [StudySubscriptionWhereInput!]
  NOT: [StudySubscriptionWhereInput!]
}

input StudyUpdateDataInput {
  name: String
  area: String
  protocol_number: String
  title: String
  phase: Int
  services: Int
  modified_date: DateTime
  status: String
  company: CompanyUpdateOneRequiredWithoutStudiesInput
}

input StudyUpdateInput {
  name: String
  area: String
  protocol_number: String
  title: String
  phase: Int
  services: Int
  modified_date: DateTime
  status: String
  company: CompanyUpdateOneRequiredWithoutStudiesInput
}

input StudyUpdateManyDataInput {
  name: String
  area: String
  protocol_number: String
  title: String
  phase: Int
  services: Int
  modified_date: DateTime
  status: String
}

input StudyUpdateManyMutationInput {
  name: String
  area: String
  protocol_number: String
  title: String
  phase: Int
  services: Int
  modified_date: DateTime
  status: String
}

input StudyUpdateManyWithoutCompanyInput {
  create: [StudyCreateWithoutCompanyInput!]
  delete: [StudyWhereUniqueInput!]
  connect: [StudyWhereUniqueInput!]
  set: [StudyWhereUniqueInput!]
  disconnect: [StudyWhereUniqueInput!]
  update: [StudyUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [StudyUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [StudyScalarWhereInput!]
  updateMany: [StudyUpdateManyWithWhereNestedInput!]
}

input StudyUpdateManyWithWhereNestedInput {
  where: StudyScalarWhereInput!
  data: StudyUpdateManyDataInput!
}

input StudyUpdateOneRequiredInput {
  create: StudyCreateInput
  update: StudyUpdateDataInput
  upsert: StudyUpsertNestedInput
  connect: StudyWhereUniqueInput
}

input StudyUpdateWithoutCompanyDataInput {
  name: String
  area: String
  protocol_number: String
  title: String
  phase: Int
  services: Int
  modified_date: DateTime
  status: String
}

input StudyUpdateWithWhereUniqueWithoutCompanyInput {
  where: StudyWhereUniqueInput!
  data: StudyUpdateWithoutCompanyDataInput!
}

input StudyUpsertNestedInput {
  update: StudyUpdateDataInput!
  create: StudyCreateInput!
}

input StudyUpsertWithWhereUniqueWithoutCompanyInput {
  where: StudyWhereUniqueInput!
  update: StudyUpdateWithoutCompanyDataInput!
  create: StudyCreateWithoutCompanyInput!
}

input StudyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  area: String
  area_not: String
  area_in: [String!]
  area_not_in: [String!]
  area_lt: String
  area_lte: String
  area_gt: String
  area_gte: String
  area_contains: String
  area_not_contains: String
  area_starts_with: String
  area_not_starts_with: String
  area_ends_with: String
  area_not_ends_with: String
  protocol_number: String
  protocol_number_not: String
  protocol_number_in: [String!]
  protocol_number_not_in: [String!]
  protocol_number_lt: String
  protocol_number_lte: String
  protocol_number_gt: String
  protocol_number_gte: String
  protocol_number_contains: String
  protocol_number_not_contains: String
  protocol_number_starts_with: String
  protocol_number_not_starts_with: String
  protocol_number_ends_with: String
  protocol_number_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  phase: Int
  phase_not: Int
  phase_in: [Int!]
  phase_not_in: [Int!]
  phase_lt: Int
  phase_lte: Int
  phase_gt: Int
  phase_gte: Int
  services: Int
  services_not: Int
  services_in: [Int!]
  services_not_in: [Int!]
  services_lt: Int
  services_lte: Int
  services_gt: Int
  services_gte: Int
  modified_date: DateTime
  modified_date_not: DateTime
  modified_date_in: [DateTime!]
  modified_date_not_in: [DateTime!]
  modified_date_lt: DateTime
  modified_date_lte: DateTime
  modified_date_gt: DateTime
  modified_date_gte: DateTime
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  company: CompanyWhereInput
  AND: [StudyWhereInput!]
  OR: [StudyWhereInput!]
  NOT: [StudyWhereInput!]
}

input StudyWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  bid(where: BidSubscriptionWhereInput): BidSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  region(where: RegionSubscriptionWhereInput): RegionSubscriptionPayload
  service(where: ServiceSubscriptionWhereInput): ServiceSubscriptionPayload
  specialty(where: SpecialtySubscriptionWhereInput): SpecialtySubscriptionPayload
  study(where: StudySubscriptionWhereInput): StudySubscriptionPayload
  therapeuticArea(where: TherapeuticAreaSubscriptionWhereInput): TherapeuticAreaSubscriptionPayload
}

type TherapeuticArea {
  id: ID!
  name: String!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
}

type TherapeuticAreaConnection {
  pageInfo: PageInfo!
  edges: [TherapeuticAreaEdge]!
  aggregate: AggregateTherapeuticArea!
}

input TherapeuticAreaCreateInput {
  id: ID
  name: String!
  companies: CompanyCreateManyWithoutTherapeuticAreasInput
}

input TherapeuticAreaCreateManyWithoutCompaniesInput {
  create: [TherapeuticAreaCreateWithoutCompaniesInput!]
  connect: [TherapeuticAreaWhereUniqueInput!]
}

input TherapeuticAreaCreateWithoutCompaniesInput {
  id: ID
  name: String!
}

type TherapeuticAreaEdge {
  node: TherapeuticArea!
  cursor: String!
}

enum TherapeuticAreaOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TherapeuticAreaPreviousValues {
  id: ID!
  name: String!
}

input TherapeuticAreaScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TherapeuticAreaScalarWhereInput!]
  OR: [TherapeuticAreaScalarWhereInput!]
  NOT: [TherapeuticAreaScalarWhereInput!]
}

type TherapeuticAreaSubscriptionPayload {
  mutation: MutationType!
  node: TherapeuticArea
  updatedFields: [String!]
  previousValues: TherapeuticAreaPreviousValues
}

input TherapeuticAreaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TherapeuticAreaWhereInput
  AND: [TherapeuticAreaSubscriptionWhereInput!]
  OR: [TherapeuticAreaSubscriptionWhereInput!]
  NOT: [TherapeuticAreaSubscriptionWhereInput!]
}

input TherapeuticAreaUpdateInput {
  name: String
  companies: CompanyUpdateManyWithoutTherapeuticAreasInput
}

input TherapeuticAreaUpdateManyDataInput {
  name: String
}

input TherapeuticAreaUpdateManyMutationInput {
  name: String
}

input TherapeuticAreaUpdateManyWithoutCompaniesInput {
  create: [TherapeuticAreaCreateWithoutCompaniesInput!]
  delete: [TherapeuticAreaWhereUniqueInput!]
  connect: [TherapeuticAreaWhereUniqueInput!]
  set: [TherapeuticAreaWhereUniqueInput!]
  disconnect: [TherapeuticAreaWhereUniqueInput!]
  update: [TherapeuticAreaUpdateWithWhereUniqueWithoutCompaniesInput!]
  upsert: [TherapeuticAreaUpsertWithWhereUniqueWithoutCompaniesInput!]
  deleteMany: [TherapeuticAreaScalarWhereInput!]
  updateMany: [TherapeuticAreaUpdateManyWithWhereNestedInput!]
}

input TherapeuticAreaUpdateManyWithWhereNestedInput {
  where: TherapeuticAreaScalarWhereInput!
  data: TherapeuticAreaUpdateManyDataInput!
}

input TherapeuticAreaUpdateWithoutCompaniesDataInput {
  name: String
}

input TherapeuticAreaUpdateWithWhereUniqueWithoutCompaniesInput {
  where: TherapeuticAreaWhereUniqueInput!
  data: TherapeuticAreaUpdateWithoutCompaniesDataInput!
}

input TherapeuticAreaUpsertWithWhereUniqueWithoutCompaniesInput {
  where: TherapeuticAreaWhereUniqueInput!
  update: TherapeuticAreaUpdateWithoutCompaniesDataInput!
  create: TherapeuticAreaCreateWithoutCompaniesInput!
}

input TherapeuticAreaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
  AND: [TherapeuticAreaWhereInput!]
  OR: [TherapeuticAreaWhereInput!]
  NOT: [TherapeuticAreaWhereInput!]
}

input TherapeuticAreaWhereUniqueInput {
  id: ID
  name: String
}
`
      }
    